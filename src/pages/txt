in admin dashboard i want exact  i want for this page for each user 
the code is 
add student : 
import React, { useState } from 'react';
import { db } from '../services/firebase';
import { collection, addDoc } from 'firebase/firestore';
import { useAuthContext } from '../context/AuthContext';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Header from './HeaderFooter';
import Footer from './Footer';

const StudentEntry = () => {
  const { user } = useAuthContext(); // Get the currently logged-in user
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    regNo: '',
    name: '',
    dob: '',
    gender: '',
    tenth: '',
    twelfth: '',
    ug: '',
    pg: '',
    address: '',
    skillSet: '',
    passedOutYear: '', // Add passedOutYear
  });

  // Handler for manual form entry
  const handleChange = (e) => {
    const { name, value } = e.target;

    // Ensure percentage fields don't exceed 100
    if (['tenth', 'twelfth', 'ug', 'pg'].includes(name) && value > 100) {
      toast.error('Percentage cannot exceed 100');
      return;
    }

    // Prevent negative values
    if (['tenth', 'twelfth', 'ug', 'pg'].includes(name) && value < 0) {
      toast.error('Percentage cannot be negative');
      return;
    }

    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // Handler for manual form submission
  const handleManualSubmit = async (e) => {
    e.preventDefault();
  
    if (!user) {
      toast.error('User not authenticated');
      return;
    }
  
    // Optional validation for minimum year (optional boundary check)
    if (formData.passedOutYear < 1900) {
      toast.error('Please enter a valid year (greater than 1900).');
      return;
    }
  
    setLoading(true);
  
    try {
      // Add document to Firestore
      const docRef = await addDoc(collection(db, 'students'), {
        ...formData,
        userId: user.uid,
      });
      toast.success('Data saved successfully!');
      console.log('Document written with ID: ', docRef.id);
  
      // Clear the form after submission
      setFormData({
        regNo: '',
        name: '',
        dob: '',
        gender: '',
        tenth: '',
        twelfth: '',
        ug: '',
        pg: '',
        address: '',
        skillSet: '',
        passedOutYear: '',
      });
    } catch (error) {
      console.error('Error adding document: ', error);
      toast.error('Error saving data');
    } finally {
      setLoading(false);
    }
  };
  

  return (
    <div className="flex flex-col min-h-screen">
      {/* Header */}
      <Header />

      {/* Main Content */}
      <main className="flex-grow bg-gray-100 p-6 mt-24">
        <div className="container mx-auto bg-white shadow-md rounded-lg p-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-6">Student Entry</h2>

          {/* Manual Entry Form */}
          <form onSubmit={handleManualSubmit}>
            {/* Registration Number */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Registration No
              </label>
              <input
                type="text"
                name="regNo"
                value={formData.regNo}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-lg"
                placeholder="Enter registration number"
                required
              />
            </div>

            {/* Name */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Full Name
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-lg"
                placeholder="Enter student's full name"
                required
              />
            </div>

            {/* Date of Birth */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Date of Birth
              </label>
              <input
                type="date"
                name="dob"
                value={formData.dob}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-lg"
                required
              />
            </div>

            {/* Gender */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Gender
              </label>
              <select
                name="gender"
                value={formData.gender}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-lg"
                required
              >
                <option value="">Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
              </select>
            </div>

            {/* Address */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Address
              </label>
              <textarea
                name="address"
                value={formData.address}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-lg"
                placeholder="Enter address"
                required
              />
            </div>

            {/* Academic Details */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {['tenth', 'twelfth', 'ug', 'pg'].map((field) => (
                <div key={field}>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {`${field.charAt(0).toUpperCase() + field.slice(1)} Grade Percentage`}
                  </label>
                  <input
                    type="number"
                    name={field}
                    value={formData[field]}
                    onChange={handleChange}
                    className="w-full p-2 border border-gray-300 rounded-lg"
                    placeholder={`Enter ${field} grade percentage`}
                    required
                  />
                </div>
              ))}
            </div>

            {/* Passed-Out Year */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Passed-Out Year
              </label>
              <input
                type="number"
                name="passedOutYear"
                value={formData.passedOutYear}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-lg"
                placeholder="Enter passed-out year"
                required
              />
            </div>

            {/* Skill Set */}
            <div className="mt-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">Skill Set</label>
              <input
                type="text"
                name="skillSet"
                value={formData.skillSet}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-lg"
                placeholder="Enter skills (e.g., JavaScript, Python, etc.)"
                required
              />
            </div>

            {/* Button Container */}
            <div className="flex justify-between mt-6">
              <button
                type="button"
                onClick={() => window.history.back()}
                className="bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600 transition duration-200"
              >
                Back
              </button>

              <button
                type="submit"
                className={`bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-200 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
                disabled={loading}
              >
                {loading ? 'Saving...' : 'Save'}
              </button>
            </div>
          </form>
        </div>
      </main>

      {/* Toast Notifications */}
      <ToastContainer />

      {/* Footer */}
      <Footer />
    </div>
  );
};

export default StudentEntry;
student list : import React, { useEffect, useState } from 'react';
import { db } from '../services/firebase';
import { collection, query, where, getDocs, deleteDoc, doc, updateDoc } from 'firebase/firestore';
import { useAuthContext } from '../context/AuthContext';
import Header from './HeaderFooter';
import Footer from './Footer';
import { FaSearch } from 'react-icons/fa';

const Toast = ({ message, onClose }) => (
  <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
    <div className="bg-white text-center py-4 px-6 rounded shadow-lg">
      <p>{message}</p>
      <button
        onClick={onClose}
        className="mt-4 bg-blue-500 text-white py-1 px-4 rounded hover:bg-blue-600 transition duration-200"
      >
        Close
      </button>
    </div>
  </div>
);

const StudentList = () => {
  const { user } = useAuthContext();
  const [students, setStudents] = useState([]);
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [toast, setToast] = useState(null);
  const [uniqueYears, setUniqueYears] = useState([]);
  const [selectedYear, setSelectedYear] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [searchField, setSearchField] = useState('name');

  useEffect(() => {
    const fetchStudents = async () => {
      if (!user) return;

      setLoading(true); // Show loader while fetching
      try {
        const q = query(
          collection(db, 'students'),
          where('userId', '==', user.uid) // Ensure filtering by current user's UID
        );
        const querySnapshot = await getDocs(q);
        const studentsData = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));

        // Extract unique years for dropdown
        const years = [...new Set(studentsData.map(student => student.passedOutYear))];
        setUniqueYears(years);

        // Set state with fetched data
        setStudents(studentsData);
        setFilteredStudents(studentsData);
      } catch (error) {
        console.error('Error fetching student data:', error);
      } finally {
        setLoading(false); // Hide loader after fetching
      }
    };

    fetchStudents();
  }, [user]); // Re-fetch data when user changes (e.g., login/logout)

  const deleteAllStudents = async () => {
    if (window.confirm('Are you sure you want to delete all students? This action cannot be undone.')) {
      try {
        const q = query(collection(db, 'students'), where('userId', '==', user.uid));
        const querySnapshot = await getDocs(q);
        const deletePromises = querySnapshot.docs.map((doc) => deleteDoc(doc.ref));
        await Promise.all(deletePromises);

        // Clear local state after deletion
        setStudents([]);
        setFilteredStudents([]);
        setToast('All students deleted successfully!');
      } catch (error) {
        console.error('Error deleting students:', error);
      }
    }
  };

  const handleEdit = async (student) => {
    const updatedData = {
      regNo: prompt("Enter new Registration No:", student.regNo),
      name: prompt("Enter new Name:", student.name),
      dob: prompt("Enter new Date of Birth:", student.dob),
      gender: prompt("Enter new Gender:", student.gender),
      address: prompt("Enter new Address:", student.address),
      tenth: prompt("Enter new 10th Percentage:", student.tenth),
      twelfth: prompt("Enter new 12th Percentage:", student.twelfth),
      ug: prompt("Enter new UG Percentage:", student.ug),
      pg: prompt("Enter new PG Percentage:", student.pg),
      skillSet: prompt("Enter new Skill Set:", student.skillSet),
      passedOutYear: prompt("Enter new Passed-Out Year:", student.passedOutYear),
    };

    if (Object.values(updatedData).every((field) => field)) {
      try {
        await updateDoc(doc(db, 'students', student.id), updatedData);

        // Update local state with edited data
        setStudents((prev) =>
          prev.map((std) => (std.id === student.id ? { ...std, ...updatedData } : std))
        );
        setToast('Student details updated successfully!');
      } catch (error) {
        console.error('Error updating student data:', error);
      }
    }
  };

  const handleYearFilter = (year) => {
    setSelectedYear(year);
    const filtered = year ? students.filter((student) => student.passedOutYear === year) : students;
    setFilteredStudents(filtered);
  };

  const resetFilter = () => {
    setFilteredStudents(students);
    setSelectedYear('');
  };

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
    const filtered = students.filter(student =>
      student[searchField]?.toString().toLowerCase().includes(e.target.value.toLowerCase())
    );
    setFilteredStudents(filtered);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="relative flex flex-col min-h-screen bg-gradient-to-br from-blue-50 to-gray-200 overflow-hidden">
      <Header />
      <main className="flex-grow p-6 mt-24">
        <div className="container mx-auto bg-white shadow-lg rounded-lg p-8 border border-gray-300">
          <div className="flex flex-wrap justify-between items-center mb-4 gap-4">
            <button
              onClick={() => window.history.back()}
              className="bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600 transition duration-200 mb-4"
            >
              Back
            </button>
            <div className="flex flex-wrap gap-4 items-center justify-between mb-4 w-full md:w-auto">
              <button
                onClick={deleteAllStudents}
                className="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition duration-200 w-full md:w-auto"
              >
                Delete All Students
              </button>
              <select
                value={selectedYear}
                onChange={(e) => handleYearFilter(e.target.value)}
                className="py-2 px-4 rounded-lg border border-gray-300 w-full md:w-auto"
              >
                <option value="">Select Year</option>
                {uniqueYears.map((year) => (
                  <option key={year} value={year}>{year}</option>
                ))}
              </select>
              <button
                onClick={resetFilter}
                className="py-2 px-4 rounded-lg bg-red-500 text-white w-full md:w-auto"
              >
                Reset Filter
              </button>
            </div>
          </div>

          <div className="mb-4 flex items-center border border-gray-300 rounded-lg p-2 space-x-2">
            <select
              value={searchField}
              onChange={(e) => setSearchField(e.target.value)}
              className="border border-gray-300 rounded-lg p-2 w-full md:w-auto"
            >
              <option value="regNo">Reg No</option>
              <option value="name">Name</option>
              <option value="dob">DoB</option>
              <option value="gender">Gender</option>
              <option value="address">Address</option>
              <option value="tenth">10th%</option>
              <option value="twelfth">12th%</option>
              <option value="ug">UG%</option>
              <option value="pg">PG%</option>
              <option value="skillSet">Skill Set</option>
              <option value="passedOutYear">Passed-Out Year</option>
            </select>

            <FaSearch className="text-gray-500 mr-2" />
            <input
              type="text"
              value={searchTerm}
              onChange={handleSearch}
              placeholder="Search"
              className="outline-none w-full p-2"
            />
          </div>

          <h2 className="text-2xl font-bold text-gray-800 mb-6">Student List</h2>

          <div className="overflow-auto">
            <table className="min-w-full bg-white">
              <thead>
                <tr className="bg-blue-500 text-white">
                  <th className="px-4 py-2 border-b">Reg No</th>
                  <th className="px-4 py-2 border-b">Name</th>
                  <th className="px-4 py-2 border-b">DoB</th>
                  <th className="px-4 py-2 border-b">Gender</th>
                  <th className="px-4 py-2 border-b">Address</th>
                  <th className="px-4 py-2 border-b">10th%</th>
                  <th className="px-4 py-2 border-b">12th%</th>
                  <th className="px-4 py-2 border-b">UG%</th>
                  <th className="px-4 py-2 border-b">PG%</th>
                  <th className="px-4 py-2 border-b">Skill Set</th>
                  <th className="px-4 py-2 border-b">Passed-Out Year</th>
                  <th className="px-4 py-2 border-b">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredStudents.map((student) => (
                  <tr key={student.id} className="border-b hover:bg-gray-100">
                    <td className="px-4 py-2">{student.regNo}</td>
                    <td className="px-4 py-2">{student.name}</td>
                    <td className="px-4 py-2">{student.dob}</td>
                    <td className="px-4 py-2">{student.gender}</td>
                    <td className="px-4 py-2">{student.address}</td>
                    <td className="px-4 py-2">{student.tenth}</td>
                    <td className="px-4 py-2">{student.twelfth}</td>
                    <td className="px-4 py-2">{student.ug}</td>
                    <td className="px-4 py-2">{student.pg}</td>
                    <td className="px-4 py-2">{student.skillSet}</td>
                    <td className="px-4 py-2">{student.passedOutYear}</td>
                    <td className="px-4 py-2">
                      <button
                        onClick={() => handleEdit(student)}
                        className="bg-yellow-500 text-white py-1 px-3 rounded-lg hover:bg-yellow-600"
                      >
                        Edit
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </main>

      {toast && (
        <Toast message={toast} onClose={() => setToast(null)} />
      )}

      <Footer />
    </div>
  );
};

export default StudentList;
Annual report :

import React, { useEffect, useState } from 'react';
import { db } from '../services/firebase';
import { collection, getDocs, query, where, updateDoc, doc } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useNavigate } from 'react-router-dom';

const StudentYearPage = () => {
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isMobile, setIsMobile] = useState(false);
  const [selectedYear, setSelectedYear] = useState(''); // State for selected year
  const navigate = useNavigate();

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    const fetchStudents = async () => {
      try {
        const auth = getAuth();
        const user = auth.currentUser;

        if (user) {
          const studentsCollection = collection(db, 'students');
          const q = query(studentsCollection, where("userId", "==", user.uid));
          const studentSnapshot = await getDocs(q);
          const studentList = studentSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
          setStudents(studentList);
        }
      } catch (error) {
        console.error("Error fetching student data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchStudents();
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Extract unique years for the dropdown
  const uniqueYears = [...new Set(students.map(student => student.passedOutYear))];

  // Filter students based on the selected year
  const filteredStudents = selectedYear
    ? students.filter(student => student.passedOutYear === selectedYear)
    : students;

  const updatePlacementStatus = async (studentId, status) => {
    try {
      const studentRef = doc(db, 'students', studentId);
      await updateDoc(studentRef, { placementStatus: status });
      setStudents(prevStudents =>
        prevStudents.map(student =>
          student.id === studentId ? { ...student, placementStatus: status } : student
        )
      );

      if (status === 'Placed') toast.success('Student marked as Placed!');
      else if (status === 'Unplaced') toast.error('Student marked as Unplaced!');
      else toast.info('Student status updated to None.');
    } catch (error) {
      console.error("Error updating placement status:", error);
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-50 py-6 px-4 pt-16">
      <div className="w-full max-w-6xl bg-white rounded-lg shadow-lg p-6 flex flex-col relative">
        <h1 className="text-2xl font-bold mb-4 text-center">Student Year Page</h1>

        {/* Year Dropdown Filter */}
        <div className="mb-4 flex justify-end">
          <select
            value={selectedYear}
            onChange={(e) => setSelectedYear(e.target.value)}
            className="p-2 border rounded"
          >
            <option value="">All Years</option>
            {uniqueYears.map((year) => (
              <option key={year} value={year}>
                {year}
              </option>
            ))}
          </select>
        </div>

        {loading ? (
          <div className="flex justify-center items-center">
            <div className="spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full border-blue-600" role="status"></div>
          </div>
        ) : (
          <>
            {filteredStudents.length === 0 ? (
              <p className="text-center">No students found.</p>
            ) : (
              <div className="overflow-x-auto mb-4">
                <table className="table-auto w-full border-collapse border border-gray-400 shadow-lg">
                  <thead className="bg-blue-600 text-white">
                    <tr>
                      <th className="px-4 py-2 border">Reg No</th>
                      <th className="px-4 py-2 border">Name</th>
                      <th className="px-4 py-2 border">Gender</th>
                      <th className="px-4 py-2 border">Passed-Out Year</th>
                      <th className="px-4 py-2 border">Placement Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredStudents.map((student) => (
                      <tr key={student.id} className="hover:bg-gray-100">
                        <td className="border px-4 py-2">{student.regNo}</td>
                        <td className="border px-4 py-2">{student.name}</td>
                        <td className="border px-4 py-2">{student.gender}</td>
                        <td className="border px-4 py-2">{student.passedOutYear}</td>
                        <td className="border px-4 py-2">
                          {/* Mobile and desktop views */}
                          {isMobile ? (
                            <select
                              value={student.placementStatus}
                              onChange={(e) => updatePlacementStatus(student.id, e.target.value)}
                              className="p-2 border rounded w-full"
                            >
                              <option value="None">None</option>
                              <option value="Placed">Placed</option>
                              <option value="Unplaced">Unplaced</option>
                            </select>
                          ) : (
                            <>
                              {/* Buttons for desktop */}
                              <button
                                className={`px-2 py-1 rounded ${student.placementStatus === 'Placed' ? 'bg-green-500' : 'bg-gray-300'} hover:bg-green-400`}
                                onClick={() => updatePlacementStatus(student.id, 'Placed')}
                              >
                                Placed
                              </button>
                              <button
                                className={`ml-2 px-2 py-1 rounded ${student.placementStatus === 'Unplaced' ? 'bg-red-500' : 'bg-gray-300'} hover:bg-red-400`}
                                onClick={() => updatePlacementStatus(student.id, 'Unplaced')}
                              >
                                Unplaced
                              </button>
                              <button
                                className={`ml-2 px-2 py-1 rounded ${student.placementStatus === 'None' ? 'bg-gray-500' : 'bg-gray-300'} hover:bg-gray-400`}
                                onClick={() => updatePlacementStatus(student.id, 'None')}
                              >
                                None
                              </button>
                            </>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </>
        )}

        {/* Back Button */}
        <div className="flex justify-end mt-auto">
          <button
            className="bg-blue-600 text-white px-4 py-2 rounded-full shadow-md hover:bg-blue-700"
            onClick={() => navigate(-1)}
          >
            Back
          </button>
        </div>
      </div>

      <ToastContainer position="top-center" autoClose={5000} hideProgressBar newestOnTop closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />
    </div>
  );
};

export default StudentYearPage;
Placed Student:

import React, { useState, useEffect } from 'react';
import { db } from '../services/firebase';
import { collection, query, where, getDocs, updateDoc, doc } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const PlacedStudentsPage = () => {
  const [students, setStudents] = useState([]);
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState({});
  const [editing, setEditing] = useState({});
  const [selectedYear, setSelectedYear] = useState('');
  const [error, setError] = useState(null);
  const currentUser = getAuth().currentUser;

  useEffect(() => {
    const fetchStudents = async () => {
      if (!currentUser) {
        setLoading(false);
        setError('You must be logged in to view this page.');
        return;
      }

      try {
        setLoading(true);
        const studentsRef = collection(db, 'students');
        const q = query(studentsRef, where('userId', '==', currentUser.uid), where('placementStatus', '==', 'Placed'));
        const querySnapshot = await getDocs(q);
        const studentsData = [];
        querySnapshot.forEach((doc) => {
          studentsData.push({ id: doc.id, ...doc.data() });
        });

        setStudents(studentsData);
        setFilteredStudents(studentsData); // Show all initially
      } catch (err) {
        console.error('Error fetching students:', err);
        setError('Error fetching students');
      } finally {
        setLoading(false);
      }
    };

    fetchStudents();
  }, [currentUser]);

  // Filter students by selected year
  const handleYearChange = (e) => {
    const year = e.target.value;
    setSelectedYear(year);
    if (year) {
      setFilteredStudents(students.filter(student => student.passedOutYear === year));
    } else {
      setFilteredStudents(students); // Show all students if no year selected
    }
  };

  // Handle input changes for editing
  const handleInputChange = (e, studentId, field) => {
    const { value } = e.target;
    setFilteredStudents(prevStudents => prevStudents.map(student =>
      student.id === studentId ? { ...student, [field]: value } : student
    ));
  };

  // Handle save functionality
  const handleUpdateStudent = async (studentId) => {
    setSaving(prev => ({ ...prev, [studentId]: true }));
    const student = filteredStudents.find(student => student.id === studentId);
    try {
      const studentRef = doc(db, 'students', studentId);
      await updateDoc(studentRef, {
        companyName: student.companyName,
        role: student.role,
        package: student.package,
      });
      toast.success('Student details updated successfully!');
    } catch (err) {
      console.error('Error updating student:', err);
      toast.error('Error updating student details');
    } finally {
      setSaving(prev => ({ ...prev, [studentId]: false }));
      setEditing(prev => ({ ...prev, [studentId]: false }));
    }
  };

  const toggleEdit = (studentId) => {
    setEditing(prev => ({ ...prev, [studentId]: !prev[studentId] }));
  };

  return (
    <div className="container mx-auto p-4 mt-20">
      <h2 className="text-xl font-semibold mb-4">Placed Students</h2>

      {/* Passed-Out Year Dropdown */}
      <div className="mb-4">
        <select
          value={selectedYear}
          onChange={handleYearChange}
          className="border p-2 rounded"
        >
          <option value="">All Years</option>
          {[...new Set(students.map(student => student.passedOutYear))].map(year => (
            <option key={year} value={year}>{year}</option>
          ))}
        </select>
      </div>

      {loading ? (
        <div>Loading...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : (
        filteredStudents.length === 0 ? (
          <p>No placed students found for the selected year.</p>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredStudents.map((student) => (
              <div key={student.id} className="border p-4 rounded shadow-md">
                <p><strong>Name:</strong> {student.name}</p>
                <p><strong>Registration No:</strong> {student.regNo}</p>
                <p><strong>Passed-Out Year:</strong> {student.passedOutYear}</p>

                {/* Editable Fields */}
                <div className="space-y-2">
                  <input
                    type="text"
                    value={student.companyName || ''}
                    onChange={(e) => handleInputChange(e, student.id, 'companyName')}
                    className="border p-2 rounded w-full"
                    placeholder="Company Name"
                    disabled={!editing[student.id]}
                  />
                  <input
                    type="text"
                    value={student.role || ''}
                    onChange={(e) => handleInputChange(e, student.id, 'role')}
                    className="border p-2 rounded w-full"
                    placeholder="Role"
                    disabled={!editing[student.id]}
                  />
                  <input
                    type="text"
                    value={student.package || ''}
                    onChange={(e) => handleInputChange(e, student.id, 'package')}
                    className="border p-2 rounded w-full"
                    placeholder="Package"
                    disabled={!editing[student.id]}
                  />
                </div>

                {/* Buttons */}
                <div className="mt-2 flex space-x-2">
                  {editing[student.id] ? (
                    <button
                      onClick={() => handleUpdateStudent(student.id)}
                      className="bg-green-500 text-white px-4 py-1 rounded"
                      disabled={saving[student.id]}
                    >
                      {saving[student.id] ? 'Saving...' : 'Save OK'}
                    </button>
                  ) : (
                    <button
                      onClick={() => toggleEdit(student.id)}
                      className="bg-yellow-500 text-white px-4 py-1 rounded"
                    >
                      Edit
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )
      )}
      <ToastContainer />

      {/* Back Button */}
      <div className="flex justify-center mt-8">
        <button
          onClick={() => window.history.back()}
          className="bg-blue-500 text-white px-4 py-2 rounded"
        >
          Back
        </button>
      </div>
    </div>
  );
};

export default PlacedStudentsPage; "
generate report :
import React, { useState, useEffect } from 'react';
import { db } from '../services/firebase';
import { collection, query, where, getDocs } from 'firebase/firestore';
import * as XLSX from 'xlsx';
import { useAuthContext } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import Header from './HeaderFooter';
import Footer from './Footer';

const ExcelGenerator = () => {
  const { user } = useAuthContext();
  const [students, setStudents] = useState([]);
  const [companyName, setCompanyName] = useState('');
  const [role, setRole] = useState('');
  const [date, setDate] = useState('');
  const [jobLocation, setJobLocation] = useState('');
  const [packageAmount, setPackageAmount] = useState('');

  // State for percentage criteria
  const [tenthCriteria, setTenthCriteria] = useState(60);
  const [twelfthCriteria, setTwelfthCriteria] = useState(60);
  const [ugCriteria, setUgCriteria] = useState(60);
  const [pgCriteria, setPgCriteria] = useState(60);

  // State for passed-out year filter
  const [passedOutYearFilter, setPassedOutYearFilter] = useState('');

  const [loading, setLoading] = useState(true);
  const [showToast, setShowToast] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    const fetchStudents = async () => {
      if (!user) return;

      try {
        const q = query(collection(db, 'students'), where('userId', '==', user.uid));
        const querySnapshot = await getDocs(q);
        const studentsData = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
        setStudents(studentsData);
      } catch (error) {
        console.error('Error fetching student data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchStudents();
  }, [user]);

  // Extract unique Passed-Out Years
  const passedOutYears = [...new Set(students.map((student) => student.passedOutYear))];

  const generateExcel = () => {
    // Apply filter based on passedOutYearFilter
    const filteredStudents = students.filter((student) =>
      student.tenth >= tenthCriteria &&
      student.twelfth >= twelfthCriteria &&
      student.ug >= ugCriteria &&
      student.pg >= pgCriteria &&
      (passedOutYearFilter ? student.passedOutYear === passedOutYearFilter : true)
    );

    const data = filteredStudents.map((student) => ({
      'Company Name': companyName,
      'Role': role,
      'Date': date,
      'Job Location': jobLocation,
      'Package': packageAmount,
      'Reg No': student.regNo,
      'Name': student.name,
      'DoB': student.dob,
      'Gender': student.gender,
      'Address': student.address,
      '10th%': student.tenth,
      '12th%': student.twelfth,
      'UG%': student.ug,
      'PG%': student.pg,
      'Skill Set': student.skillSet,
      'Passed-Out Year': student.passedOutYear,
    }));

    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Students');

    XLSX.writeFile(workbook, 'Students.xlsx');

    setShowToast(true);
    setTimeout(() => {
      setShowToast(false);
    }, 3000);
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <div className="container mx-auto p-4 sm:p-6 flex-grow mt-20">
        {/* Responsive grid for form sections */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div className="space-y-4">
            <h2 className="text-2xl font-bold mb-4">Company Details</h2>
            <div>
              <label className="block mb-2">Company Name</label>
              <input
                type="text"
                value={companyName}
                onChange={(e) => setCompanyName(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>

            <div>
              <label className="block mb-2">Role</label>
              <input
                type="text"
                value={role}
                onChange={(e) => setRole(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>

            <div>
              <label className="block mb-2">Date</label>
              <input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>

            {/* New Fields for Job Location and Package */}
            <div>
              <label className="block mb-2">Job Location</label>
              <input
                type="text"
                value={jobLocation}
                onChange={(e) => setJobLocation(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>

            <div>
              <label className="block mb-2">Package</label>
              <input
                type="text"
                value={packageAmount}
                onChange={(e) => setPackageAmount(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>
          </div>

          <div className="space-y-4">
            <h3 className="text-xl font-semibold mb-4">Enter Criteria for Filtering</h3>

            <div>
              <label className="block mb-2">Minimum 10th Grade Percentage</label>
              <input
                type="number"
                value={tenthCriteria}
                onChange={(e) => setTenthCriteria(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>

            <div>
              <label className="block mb-2">Minimum 12th Grade Percentage</label>
              <input
                type="number"
                value={twelfthCriteria}
                onChange={(e) => setTwelfthCriteria(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>

            <div>
              <label className="block mb-2">Minimum UG Percentage</label>
              <input
                type="number"
                value={ugCriteria}
                onChange={(e) => setUgCriteria(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>

            <div>
              <label className="block mb-2">Minimum PG Percentage</label>
              <input
                type="number"
                value={pgCriteria}
                onChange={(e) => setPgCriteria(e.target.value)}
                className="border p-2 w-full rounded"
              />
            </div>

            {/* Filter by Passed-Out Year */}
            <div>
              <label className="block mb-2">Filter by Passed-Out Year</label>
              <select
                value={passedOutYearFilter}
                onChange={(e) => setPassedOutYearFilter(e.target.value)}
                className="border p-2 w-full rounded"
              >
                <option value="">Select Passed-Out Year</option>
                {passedOutYears.map((year) => (
                  <option key={year} value={year}>
                    {year}
                  </option>
                ))}
              </select>
            </div>

            <div className="flex flex-col sm:flex-row sm:justify-between items-center mt-4">
              <button
                onClick={() => navigate(-1)}
                className="bg-gray-500 text-white py-2 px-4 rounded-lg hover:bg-gray-600 transition duration-200 w-full sm:w-auto mb-2 sm:mb-0"
              >
                Back
              </button>
              <button
                onClick={generateExcel}
                className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-200 w-full sm:w-auto"
              >
                Generate Excel
              </button>
            </div>
          </div>
        </div>
      </div>

      {showToast && (
        <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50">
          Generate Successful!
        </div>
      )}

      <Footer />
    </div>
  );
};

export default ExcelGenerator;
exact all code I want for admin dashboard ok 



// // import React, { useState, useEffect } from "react";
// // import { FaListAlt, FaUserPlus, FaHistory, FaChartBar } from "react-icons/fa";
// // import { db } from "../auth/firebase";
// // import { getAuth } from "firebase/auth";
// // import { collection, addDoc, getDocs, doc, updateDoc } from "firebase/firestore";
// // import { toast } from "react-toastify";
// // import { useNavigate } from "react-router-dom";

// // const DriveDetails = () => {
// //   const navigate = useNavigate();
// //   const [showAddDriveForm, setShowAddDriveForm] = useState(false);
// //   const [showUpcomingDrives, setShowUpcomingDrives] = useState(false);
// //   const [showReport, setShowReport] = useState(false);
// //   const [showHistory, setShowHistory] = useState(false);
// //   const [companyName, setCompanyName] = useState("");
// //   const [role, setRole] = useState("");
// //   const [location, setLocation] = useState("");
// //   const [salary, setSalary] = useState("");
// //   const [date, setDate] = useState("");
// //   const [rounds, setRounds] = useState("");
// //   const [drives, setDrives] = useState([]);
// //   const [status, setStatus] = useState("Non Conducted");
// //   const [editMode, setEditMode] = useState(false);
// //   const [editingDriveId, setEditingDriveId] = useState(null);

// //   const fetchUpcomingDrives = async () => {
// //     const auth = getAuth();
// //     const user = auth.currentUser;
// //     const adminId = user?.uid;

// //     if (adminId) {
// //       const querySnapshot = await getDocs(
// //         collection(db, "admins", adminId, "driveDetails")
// //       );
// //       const driveData = querySnapshot.docs.map((doc) => ({
// //         id: doc.id,
// //         ...doc.data(),
// //       }));
// //       setDrives(driveData);
// //     }
// //   };

// //   useEffect(() => {
// //     if (showUpcomingDrives) {
// //       fetchUpcomingDrives();
// //     }
// //   }, [showUpcomingDrives]);

// //   const handleFormSubmit = async (e) => {
// //     e.preventDefault();
// //     const auth = getAuth();
// //     const user = auth.currentUser;
// //     const adminId = user?.uid;

// //     if (editMode) {
// //       if (editingDriveId && adminId) {
// //         try {
// //           const driveRef = doc(
// //             db,
// //             "admins",
// //             adminId,
// //             "driveDetails",
// //             editingDriveId
// //           );
// //           await updateDoc(driveRef, {
// //             companyName,
// //             role,
// //             location,
// //             salary,
// //             date,
// //             rounds,
// //             updatedAt: new Date(),
// //           });

// //           toast.success("Drive details updated successfully!");
// //           setEditMode(false);
// //           setEditingDriveId(null);
// //           fetchUpcomingDrives();
// //         } catch (error) {
// //           console.error("Error updating drive details:", error);
// //           toast.error("Failed to update drive details.");
// //         }
// //       }
// //     } else {
// //       if (adminId) {
// //         try {
// //           const driveDetails = {
// //             companyName,
// //             role,
// //             location,
// //             salary,
// //             date,
// //             rounds,
// //             createdAt: new Date(),
// //           };

// //           await addDoc(
// //             collection(db, "admins", adminId, "driveDetails"),
// //             driveDetails
// //           );
// //           toast.success("Drive details added successfully!");
// //           fetchUpcomingDrives();
// //         } catch (error) {
// //           console.error("Error adding drive details:", error);
// //           toast.error("Failed to add drive details.");
// //         }
// //       }
// //     }
// //     setShowAddDriveForm(false);
// //   };

// //   const handleEditClick = (drive) => {
// //     setEditMode(true);
// //     setEditingDriveId(drive.id);
// //     setCompanyName(drive.companyName);
// //     setRole(drive.role);
// //     setLocation(drive.location);
// //     setSalary(drive.salary);
// //     setDate(drive.date);
// //     setRounds(drive.rounds);
// //     setShowAddDriveForm(true);
// //   };

// //   const handleMarkAsConducted = async (driveId) => {
// //     const auth = getAuth();
// //     const user = auth.currentUser;
// //     const adminId = user?.uid;

// //     if (adminId) {
// //       try {
// //         const driveRef = doc(
// //           db,
// //           "admins",
// //           adminId,
// //           "driveDetails",
// //           driveId
// //         );
// //         await updateDoc(driveRef, {
// //           status: "Conducted",
// //         });

// //         toast.success("Drive marked as Conducted");
// //         fetchUpcomingDrives();
// //       } catch (error) {
// //         console.error("Error marking drive as conducted:", error);
// //         toast.error("Failed to mark drive as conducted.");
// //       }
// //     }
// //   };

// //   const handleBackToMainMenu = () => {
// //     setShowAddDriveForm(false);
// //     setShowUpcomingDrives(false);
// //     setShowHistory(false);
// //     setShowReport(false);
// //   };

// //   const handleBackToAdminPage = () => {
// //     navigate("/admin");
// //   };

// //   return (
// //     <div className="drive-detail-container p-6 flex flex-col items-center">
// //       <h2 className="text-4xl font-bold mb-8 text-center">Drive Details</h2>

// //       {/* Main Menu - buttons */}
// //       {!showAddDriveForm && !showUpcomingDrives && !showReport && !showHistory && (
// //         <div className="grid grid-cols-2 gap-12">
// //           <button
// //             className="icon-button flex flex-col items-center text-center p-6 bg-white shadow-lg rounded-xl hover:bg-gray-200"
// //             onClick={() => setShowUpcomingDrives(true)}
// //           >
// //             <FaListAlt className="text-4xl text-blue-500 mb-4" />
// //             <span className="text-lg font-medium">Upcoming Drives</span>
// //           </button>

// //           <button
// //             className="icon-button flex flex-col items-center text-center p-6 bg-white shadow-lg rounded-xl hover:bg-gray-200"
// //             onClick={() => setShowAddDriveForm(true)}
// //           >
// //             <FaUserPlus className="text-4xl text-green-500 mb-4" />
// //             <span className="text-lg font-medium">Add Drive</span>
// //           </button>

// //           <button
// //             className="icon-button flex flex-col items-center text-center p-6 bg-white shadow-lg rounded-xl hover:bg-gray-200"
// //             onClick={() => setShowHistory(true)}
// //           >
// //             <FaHistory className="text-4xl text-purple-500 mb-4" />
// //             <span className="text-lg font-medium">History</span>
// //           </button>

// //           <button
// //             className="icon-button flex flex-col items-center text-center p-6 bg-white shadow-lg rounded-xl hover:bg-gray-200"
// //             onClick={() => setShowReport(true)}
// //           >
// //             <FaChartBar className="text-4xl text-orange-500 mb-4" />
// //             <span className="text-lg font-medium">Report</span>
// //           </button>
// //         </div>
// //       )}

// //       {/* Add Drive Form */}
// //       {showAddDriveForm && (
// //         <form
// //           onSubmit={handleFormSubmit}
// //           className="space-y-4 mt-6 max-w-3xl w-full p-6 bg-white shadow-lg rounded-xl"
// //         >
// //           <div className="grid grid-cols-2 gap-6">
// //             <div className="col-span-2">
// //               <label className="block text-lg font-medium mb-2">Company Name</label>
// //               <input
// //                 type="text"
// //                 value={companyName}
// //                 onChange={(e) => setCompanyName(e.target.value)}
// //                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
// //                 required
// //               />
// //             </div>
// //             <div>
// //               <label className="block text-lg font-medium mb-2">Role</label>
// //               <input
// //                 type="text"
// //                 value={role}
// //                 onChange={(e) => setRole(e.target.value)}
// //                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
// //                 required
// //               />
// //             </div>
// //             <div>
// //               <label className="block text-lg font-medium mb-2">Location</label>
// //               <input
// //                 type="text"
// //                 value={location}
// //                 onChange={(e) => setLocation(e.target.value)}
// //                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
// //                 required
// //               />
// //             </div>
// //             <div>
// //               <label className="block text-lg font-medium mb-2">Salary</label>
// //               <input
// //                 type="number"
// //                 value={salary}
// //                 onChange={(e) => setSalary(e.target.value)}
// //                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
// //                 required
// //               />
// //             </div>
// //             <div>
// //               <label className="block text-lg font-medium mb-2">Date</label>
// //               <input
// //                 type="date"
// //                 value={date}
// //                 onChange={(e) => setDate(e.target.value)}
// //                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
// //                 required
// //               />
// //             </div>
// //             <div>
// //               <label className="block text-lg font-medium mb-2">Rounds</label>
// //               <input
// //                 type="text"
// //                 value={rounds}
// //                 onChange={(e) => setRounds(e.target.value)}
// //                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
// //                 required
// //               />
// //             </div>
// //           </div>
// //           <button
// //             type="submit"
// //             className="w-full py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 mt-6 text-lg"
// //           >
// //             {editMode ? "Update Drive" : "Save Drive"}
// //           </button>
// //         </form>
// //       )}

// //       {/* Upcoming Drives */}
// //       {showUpcomingDrives && (
// //         <div className="flex flex-col items-center mt-6">
// //           <div className="overflow-x-auto w-full max-w-5xl">
// //             <table className="min-w-full table-auto border-collapse text-sm text-center">
// //               <thead>
// //                 <tr className="bg-gray-100">
// //                   <th className="border border-gray-300 p-4">S.No</th>
// //                   <th className="border border-gray-300 p-4">Company</th>
// //                   <th className="border border-gray-300 p-4">Role</th>
// //                   <th className="border border-gray-300 p-4">Date</th>
// //                   <th className="border border-gray-300 p-4">Rounds</th>
// //                   <th className="border border-gray-300 p-4">Status</th>
// //                   <th className="border border-gray-300 p-4">Action</th>
// //                 </tr>
// //               </thead>
// //               <tbody>
// //                 {drives.map((drive, index) => (
// //                   <tr key={drive.id}>
// //                     <td className="border border-gray-300 p-4">{index + 1}</td>
// //                     <td className="border border-gray-300 p-4">{drive.companyName}</td>
// //                     <td className="border border-gray-300 p-4">{drive.role}</td>
// //                     <td className="border border-gray-300 p-4">{drive.date}</td>
// //                     <td className="border border-gray-300 p-4">{drive.rounds}</td>
// //                     <td className="border border-gray-300 p-4">
// //                       <select
// //                         value={status}
// //                         onChange={(e) => setStatus(e.target.value)}
// //                         className="p-2 border border-gray-300 rounded-lg"
// //                       >
// //                         <option value="Non Conducted">Non Conducted</option>
// //                         <option value="Conducted">Conducted</option>
// //                       </select>
// //                     </td>
// //                     <td className="border border-gray-300 p-4">
// //                       <button
// //                         onClick={() => handleMarkAsConducted(drive.id)}
// //                         className="py-2 px-4 bg-green-500 text-white rounded-lg hover:bg-green-600"
// //                       >
// //                         {drive.status === "Conducted" ? "View Report" : "Mark as Conducted"}
// //                       </button>
// //                       <button
// //                         onClick={() => handleEditClick(drive)}
// //                         className="ml-2 py-2 px-4 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600"
// //                       >
// //                         Edit
// //                       </button>
// //                     </td>
// //                   </tr>
// //                 ))}
// //               </tbody>
// //             </table>
// //           </div>

// //           <div className="mt-6 space-x-4">
// //             <button
// //               className="py-2 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
// //               onClick={handleBackToMainMenu}
// //             >
// //               Back to Main Menu
// //             </button>
// //             <button
// //               className="py-2 px-4 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
// //               onClick={handleBackToAdminPage}
// //             >
// //               Back to Admin Page
// //             </button>
// //           </div>
// //         </div>
// //       )}

// //       {/* Report */}
// //       {showReport && (
// //         <div className="mt-6 flex flex-col items-center">
// //           <div className="overflow-x-auto w-full max-w-5xl">
// //             <table className="min-w-full table-auto border-collapse text-sm text-center">
// //               <thead>
// //                 <tr className="bg-gray-100">
// //                   <th className="border border-gray-300 p-4">S.No</th>
// //                   <th className="border border-gray-300 p-4">Company</th>
// //                   <th className="border border-gray-300 p-4">Role</th>
// //                   <th className="border border-gray-300 p-4">Date</th>
// //                   <th className="border border-gray-300 p-4">Rounds</th>
// //                   <th className="border border-gray-300 p-4">Status</th>
// //                 </tr>
// //               </thead>
// //               <tbody>
// //                 {drives.filter((drive) => drive.status === "Conducted").map((drive, index) => (
// //                   <tr key={drive.id}>
// //                     <td className="border border-gray-300 p-4">{index + 1}</td>
// //                     <td className="border border-gray-300 p-4">{drive.companyName}</td>
// //                     <td className="border border-gray-300 p-4">{drive.role}</td>
// //                     <td className="border border-gray-300 p-4">{drive.date}</td>
// //                     <td className="border border-gray-300 p-4">{drive.rounds}</td>
// //                     <td className="border border-gray-300 p-4">{drive.status}</td>
// //                   </tr>
// //                 ))}
// //               </tbody>
// //             </table>
// //           </div>

// //           <div className="mt-6 space-x-4">
// //             <button
// //               className="py-2 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
// //               onClick={handleBackToMainMenu}
// //             >
// //               Back to Main Menu
// //             </button>
// //             <button
// //               className="py-2 px-4 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
// //               onClick={handleBackToAdminPage}
// //             >
// //               Back to Admin Page
// //             </button>
// //           </div>
// //         </div>
// //       )}

// //       {/* History */}
// //       {showHistory && (
// //         <div className="mt-6 flex flex-col items-center">
// //           <div className="overflow-x-auto w-full max-w-5xl">
// //             <table className="min-w-full table-auto border-collapse text-sm text-center">
// //               <thead>
// //                 <tr className="bg-gray-100">
// //                   <th className="border border-gray-300 p-4">S.No</th>
// //                   <th className="border border-gray-300 p-4">Company</th>
// //                   <th className="border border-gray-300 p-4">Role</th>
// //                   <th className="border border-gray-300 p-4">Date</th>
// //                   <th className="border border-gray-300 p-4">Rounds</th>
// //                   <th className="border border-gray-300 p-4">Status</th>
// //                 </tr>
// //               </thead>
// //               <tbody>
// //                 {drives.map((drive, index) => (
// //                   <tr key={drive.id}>
// //                     <td className="border border-gray-300 p-4">{index + 1}</td>
// //                     <td className="border border-gray-300 p-4">{drive.companyName}</td>
// //                     <td className="border border-gray-300 p-4">{drive.role}</td>
// //                     <td className="border border-gray-300 p-4">{drive.date}</td>
// //                     <td className="border border-gray-300 p-4">{drive.rounds}</td>
// //                     <td className="border border-gray-300 p-4">{drive.status}</td>
// //                   </tr>
// //                 ))}
// //               </tbody>
// //             </table>
// //           </div>

// //           <div className="mt-6 space-x-4">
// //             <button
// //               className="py-2 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
// //               onClick={handleBackToMainMenu}
// //             >
// //               Back to Main Menu
// //             </button>
// //             <button
// //               className="py-2 px-4 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
// //               onClick={handleBackToAdminPage}
// //             >
// //               Back to Admin Page
// //             </button>
// //           </div>
// //         </div>
// //       )}
// //     </div>
// //   );
// // };

// // export default DriveDetails;



















































// import React, { useState, useEffect } from "react";
// import { FaListAlt, FaUserPlus, FaHistory, FaChartBar } from "react-icons/fa";
// import { db } from "../auth/firebase"; // Firebase import
// import { getAuth } from "firebase/auth";
// import { collection, addDoc, getDocs, doc, updateDoc } from "firebase/firestore";
// import { toast } from "react-toastify";
// import { useNavigate } from "react-router-dom";

// const DriveDetails = () => {
//   const navigate = useNavigate();
//   const [showAddDriveForm, setShowAddDriveForm] = useState(false);
//   const [showUpcomingDrives, setShowUpcomingDrives] = useState(false);
//   const [showHistory, setShowHistory] = useState(false);
//   const [showReport, setShowReport] = useState(false);
//   const [companyName, setCompanyName] = useState("");
//   const [role, setRole] = useState("");
//   const [location, setLocation] = useState("");
//   const [salary, setSalary] = useState("");
//   const [date, setDate] = useState("");
//   const [rounds, setRounds] = useState("");
//   const [drives, setDrives] = useState([]);
//   const [selectedCandidates, setSelectedCandidates] = useState({});
//   const [editMode, setEditMode] = useState(false);
//   const [editingDriveId, setEditingDriveId] = useState(null);

//   // Fetch upcoming drives from Firestore
//   const fetchUpcomingDrives = async () => {
//     const auth = getAuth();
//     const user = auth.currentUser;
//     const adminId = user?.uid;

//     if (adminId) {
//       const querySnapshot = await getDocs(
//         collection(db, "admins", adminId, "driveDetails")
//       );
//       const driveData = querySnapshot.docs.map((doc) => ({
//         id: doc.id,
//         ...doc.data(),
//       }));
//       setDrives(driveData);
//     }
//   };

//   useEffect(() => {
//     if (showUpcomingDrives) {
//       fetchUpcomingDrives();
//     }
//   }, [showUpcomingDrives]);

//   const handleFormSubmit = async (e) => {
//     e.preventDefault();
//     const auth = getAuth();
//     const user = auth.currentUser;
//     const adminId = user?.uid;

//     if (editMode) {
//       if (editingDriveId && adminId) {
//         try {
//           const driveRef = doc(
//             db,
//             "admins",
//             adminId,
//             "driveDetails",
//             editingDriveId
//           );
//           await updateDoc(driveRef, {
//             companyName,
//             role,
//             location,
//             salary,
//             date,
//             rounds,
//             updatedAt: new Date(),
//           });

//           toast.success("Drive details updated successfully!");
//           setEditMode(false);
//           setEditingDriveId(null);
//           fetchUpcomingDrives();
//         } catch (error) {
//           console.error("Error updating drive details:", error);
//           toast.error("Failed to update drive details.");
//         }
//       }
//     } else {
//       if (adminId) {
//         try {
//           const driveDetails = {
//             companyName,
//             role,
//             location,
//             salary,
//             date,
//             rounds,
//             createdAt: new Date(),
//           };

//           await addDoc(
//             collection(db, "admins", adminId, "driveDetails"),
//             driveDetails
//           );
//           toast.success("Drive details added successfully!");
//           fetchUpcomingDrives();
//         } catch (error) {
//           console.error("Error adding drive details:", error);
//           toast.error("Failed to add drive details.");
//         }
//       }
//     }
//     setShowAddDriveForm(false);
//   };

//   const handleEditClick = (drive) => {
//     setEditMode(true);
//     setEditingDriveId(drive.id);
//     setCompanyName(drive.companyName);
//     setRole(drive.role);
//     setLocation(drive.location);
//     setSalary(drive.salary);
//     setDate(drive.date);
//     setRounds(drive.rounds);
//     setShowAddDriveForm(true);
//   };

//   const handleStatusChange = async (driveId, status) => {
//     const auth = getAuth();
//     const user = auth.currentUser;
//     const adminId = user?.uid;

//     if (adminId) {
//       try {
//         const driveRef = doc(
//           db,
//           "admins",
//           adminId,
//           "driveDetails",
//           driveId
//         );
//         await updateDoc(driveRef, { status });
//         toast.success("Status updated successfully!");
//         fetchUpcomingDrives();
//       } catch (error) {
//         console.error("Error updating status:", error);
//         toast.error("Failed to update status.");
//       }
//     }
//   };

//   const handleSelectedCandidateCountChange = (driveId, count) => {
//     setSelectedCandidates({
//       ...selectedCandidates,
//       [driveId]: count,
//     });
//   };

//   const handleBackToMainMenu = () => {
//     setShowAddDriveForm(false);
//     setShowUpcomingDrives(false);
//     setShowHistory(false);
//     setShowReport(false);
//     setEditMode(false);
//     setEditingDriveId(null);
//     navigate("/"); // Navigate back to the main page
//   };

//   const handleBackToAdminPage = () => {
//     navigate("/admin"); // Navigate back to the admin page
//   };

//   return (
//     <div className="drive-detail-container p-6 flex flex-col items-center">
//       <h2 className="text-4xl font-bold mb-8 text-center">Drive Details</h2>

//       {!showAddDriveForm && !showUpcomingDrives && !showHistory && !showReport && (
//         <div className="grid grid-cols-2 gap-12">
//           <button
//             className="icon-button flex flex-col items-center text-center p-6 bg-white shadow-lg rounded-xl hover:bg-gray-200"
//             onClick={() => setShowUpcomingDrives(true)}
//           >
//             <FaListAlt className="text-4xl text-blue-500 mb-4" />
//             <span className="text-lg font-medium">Upcoming Drives</span>
//           </button>

//           <button
//             className="icon-button flex flex-col items-center text-center p-6 bg-white shadow-lg rounded-xl hover:bg-gray-200"
//             onClick={() => setShowAddDriveForm(true)}
//           >
//             <FaUserPlus className="text-4xl text-green-500 mb-4" />
//             <span className="text-lg font-medium">Add Drive</span>
//           </button>

//           <button
//             className="icon-button flex flex-col items-center text-center p-6 bg-white shadow-lg rounded-xl hover:bg-gray-200"
//             onClick={() => setShowHistory(true)}
//           >
//             <FaHistory className="text-4xl text-purple-500 mb-4" />
//             <span className="text-lg font-medium">History</span>
//           </button>

//           <button
//             className="icon-button flex flex-col items-center text-center p-6 bg-white shadow-lg rounded-xl hover:bg-gray-200"
//             onClick={() => setShowReport(true)}
//           >
//             <FaChartBar className="text-4xl text-orange-500 mb-4" />
//             <span className="text-lg font-medium">Report</span>
//           </button>
//         </div>
//       )}

//       {showUpcomingDrives && (
//         <div className="bg-white p-6 rounded-xl shadow-md w-full max-w-4xl">
//           <h3 className="text-3xl mb-6">Upcoming Drives</h3>
//           <table className="w-full">
//             <thead>
//               <tr>
//                 <th className="border p-2">S.No</th>
//                 <th className="border p-2">Company</th>
//                 <th className="border p-2">Role</th>
//                 <th className="border p-2">Date</th>
//                 <th className="border p-2">Rounds</th>
//                 <th className="border p-2">Status</th>
//                 <th className="border p-2">Action</th>
//               </tr>
//             </thead>
//             <tbody>
//               {drives.map((drive, index) => (
//                 <tr key={drive.id}>
//                   <td className="border p-2">{index + 1}</td>
//                   <td className="border p-2">{drive.companyName}</td>
//                   <td className="border p-2">{drive.role}</td>
//                   <td className="border p-2">{drive.date}</td>
//                   <td className="border p-2">{drive.rounds}</td>
//                   <td className="border p-2">
//                     <select
//                       value={drive.status || "Not Conducted"}
//                       onChange={(e) => handleStatusChange(drive.id, e.target.value)}
//                     >
//                       <option value="Not Conducted">Not Conducted</option>
//                       <option value="Conducted">Conducted</option>
//                     </select>
//                   </td>
//                   <td className="border p-2">
//                     <button
//                       onClick={() => handleEditClick(drive)}
//                       className="text-blue-500"
//                     >
//                       Edit
//                     </button>
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>

//           <div className="flex justify-between mt-4">
//             <button
//               onClick={handleBackToMainMenu}
//               className="py-2 px-4 bg-gray-300 rounded-lg"
//             >
//               Back to Main Menu
//             </button>
//             <button
//               onClick={handleBackToAdminPage}
//               className="py-2 px-4 bg-gray-300 rounded-lg"
//             >
//               Back to Admin Page
//             </button>
//           </div>
//         </div>
//       )}

//       {showReport && (
//         <div className="bg-white p-6 rounded-xl shadow-md w-full max-w-4xl">
//           <h3 className="text-3xl mb-6">Report</h3>
//           <table className="w-full">
//             <thead>
//               <tr>
//                 <th className="border p-2">S.No</th>
//                 <th className="border p-2">Company</th>
//                 <th className="border p-2">Role</th>
//                 <th className="border p-2">Date</th>
//                 <th className="border p-2">Rounds</th>
//                 <th className="border p-2">Selected Candidate Count</th>
//               </tr>
//             </thead>
//             <tbody>
//               {drives.map((drive, index) => (
//                 <tr key={drive.id}>
//                   <td className="border p-2">{index + 1}</td>
//                   <td className="border p-2">{drive.companyName}</td>
//                   <td className="border p-2">{drive.role}</td>
//                   <td className="border p-2">{drive.date}</td>
//                   <td className="border p-2">{drive.rounds}</td>
//                   <td className="border p-2">
//                     <input
//                       type="number"
//                       value={selectedCandidates[drive.id] || ""}
//                       onChange={(e) =>
//                         handleSelectedCandidateCountChange(drive.id, e.target.value)
//                       }
//                       className="border px-2 py-1 rounded-lg"
//                     />
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//           <div className="flex justify-between mt-4">
//             <button
//               onClick={handleBackToMainMenu}
//               className="py-2 px-4 bg-gray-300 rounded-lg"
//             >
//               Back to Main Menu
//             </button>
//             <button
//               onClick={handleBackToAdminPage}
//               className="py-2 px-4 bg-gray-300 rounded-lg"
//             >
//               Back to Admin Page
//             </button>
//           </div>
//         </div>
//       )}

//       {showHistory && (
//         <div className="bg-white p-6 rounded-xl shadow-md w-full max-w-4xl">
//           <h3 className="text-3xl mb-6">History</h3>
//           {/* Implement History details here */}
//         </div>
//       )}

//       {showAddDriveForm && (
//         <div className="bg-white p-6 rounded-xl shadow-md w-full max-w-4xl">
//           <h3 className="text-3xl mb-6">
//             {editMode ? "Edit Drive Details" : "Add Drive Details"}
//           </h3>
//           <form onSubmit={handleFormSubmit}>
//             <div className="mb-4">
//               <label className="block text-sm font-medium">Company Name</label>
//               <input
//                 type="text"
//                 value={companyName}
//                 onChange={(e) => setCompanyName(e.target.value)}
//                 className="mt-1 px-4 py-2 w-full border rounded-lg"
//                 required
//               />
//             </div>
//             <div className="mb-4">
//               <label className="block text-sm font-medium">Role</label>
//               <input
//                 type="text"
//                 value={role}
//                 onChange={(e) => setRole(e.target.value)}
//                 className="mt-1 px-4 py-2 w-full border rounded-lg"
//                 required
//               />
//             </div>
//             <div className="mb-4">
//               <label className="block text-sm font-medium">Location</label>
//               <input
//                 type="text"
//                 value={location}
//                 onChange={(e) => setLocation(e.target.value)}
//                 className="mt-1 px-4 py-2 w-full border rounded-lg"
//                 required
//               />
//             </div>
//             <div className="mb-4">
//               <label className="block text-sm font-medium">Salary</label>
//               <input
//                 type="text"
//                 value={salary}
//                 onChange={(e) => setSalary(e.target.value)}
//                 className="mt-1 px-4 py-2 w-full border rounded-lg"
//                 required
//               />
//             </div>
//             <div className="mb-4">
//               <label className="block text-sm font-medium">Date</label>
//               <input
//                 type="date"
//                 value={date}
//                 onChange={(e) => setDate(e.target.value)}
//                 className="mt-1 px-4 py-2 w-full border rounded-lg"
//                 required
//               />
//             </div>
//             <div className="mb-4">
//               <label className="block text-sm font-medium">Rounds</label>
//               <input
//                 type="text"
//                 value={rounds}
//                 onChange={(e) => setRounds(e.target.value)}
//                 className="mt-1 px-4 py-2 w-full border rounded-lg"
//                 required
//               />
//             </div>
//             <div className="flex justify-between">
//               <button
//                 type="button"
//                 onClick={handleBackToAdminPage}
//                 className="py-2 px-4 bg-gray-300 rounded-lg"
//               >
//                 Back to Admin Page
//               </button>
//               <button
//                 type="submit"
//                 className="py-2 px-4 bg-blue-500 text-white rounded-lg"
//               >
//                 {editMode ? "Update Drive" : "Add Drive"}
//               </button>
//             </div>
//           </form>
//         </div>
//       )}
//     </div>
//   );
// };

// export default DriveDetails;

